@page "/"
@using System.Threading
@inject app_impresora.Services.BluetoothClassicService BtClassic

<div class="container">
    <div class="header">
        <h1>Configuración Impresora</h1>
    </div>

    @if (!isScanning && !devices.Any() && !isConnected)
    {
        <div class="card">
            <div class="card-body">
                <h3>Buscar dispositivos</h3>
                <button class="btn btn-primary" @onclick="ScanForDevices">Escanear Dispositivos</button>
            </div>
        </div>
    }
    else if (isScanning)
    {
        <div class="card">
            <div class="card-body">
                <h3>Escaneando...</h3>
                <p>Buscando dispositivos Bluetooth cercanos...</p>
                <button class="btn btn-secondary" @onclick="StopScan">Detener Escaneo</button>
            </div>
        </div>
    }
    else if (devices.Any() && !isConnected)
    {
        <div class="card">
            <div class="card-body">
                <h3>Dispositivos encontrados</h3>
                <select @bind="selectedMac" class="form-control">
                    <option value="">--Seleccione un dispositivo--</option>
                    @foreach (var dev in devices)
                    {
                        <option value="@dev.mac">
                            @((string.IsNullOrEmpty(dev.name) ? "Sin nombre" : dev.name)) (@dev.mac)
                        </option>
                    }
                </select>
                <button class="btn btn-primary mt-2" @onclick="ConnectSelectedDevice">Conectar</button>
            </div>
        </div>
    }
    else if (isConnected)
    {
        <div class="card">
            <div class="card-body">
                <h3>Conectado a @connectedMac</h3>
                <button class="btn btn-secondary" @onclick="Disconnect">Desconectar</button>

                <div class="mt-3">
                    <button class="btn btn-success" @onclick="ImprimirEtiquetaDespacho">
                        Imprimir
                    </button>
                </div>

                <div class="mt-3">
                    <label>Ingrese texto para imprimir (RAW o simple):</label>
                    <input type="text" @bind="printText" class="form-control" placeholder="Texto a imprimir" />
                    <button class="btn btn-primary mt-2" @onclick="PrintText">
                        Imprimir Texto
                    </button>
                </div>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="card mt-3">
            <div class="card-body @statusClass">
                <p>@statusMessage</p>
            </div>
        </div>
    }
</div>

<style>
    .container {
        padding: 20px;
        max-width: 800px;
        margin: 0 auto;
    }

    .header {
        margin-bottom: 20px;
        text-align: center;
    }

    .card {
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-bottom: 20px;
    }

    .card-body {
        padding: 20px;
    }

    .btn {
        padding: 10px 20px;
        border-radius: 4px;
        border: none;
        font-weight: bold;
        cursor: pointer;
    }

    .btn-primary {
        background-color: #512bdf;
        color: white;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

    .btn-success {
        background-color: #28a745;
        color: white;
    }

    .alert-success {
        background-color: #d4edda;
        color: #155724;
    }

    .alert-info {
        background-color: #d1ecf1;
        color: #0c5460;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
    }

    .alert-warning {
        background-color: #fff3cd;
        color: #856404;
    }

    .mt-2 {
        margin-top: 10px;
    }

    .mt-3 {
        margin-top: 15px;
    }

    .form-control {
        width: 100%;
        padding: 8px;
        margin-top: 5px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }
</style>

@code {
    // Estado
    private bool isScanning = false;
    private bool isConnected = false;

    // Almacena dispositivos descubiertos (nombre, mac)
    private List<(string name, string mac)> devices = new();

    // Selección de la lista
    private string selectedMac = "";

    // Mensajes de estado
    private string statusMessage = "";
    private string statusClass = "alert-info";

    // Guardamos la MAC del dispositivo conectado
    private string connectedMac = "";

    // Texto a imprimir
    private string printText = "";

    protected override void OnInitialized()
    {
        // Suscribir al evento DeviceDiscovered
        BtClassic.DeviceDiscovered += (name, mac) =>
        {
            // Evitar duplicados
            if (!devices.Any(d => d.mac == mac))
            {
                devices.Add((name, mac));
                StateHasChanged();
            }
        };
    }

    private async void ScanForDevices()
    {
        statusMessage = "Iniciando escaneo de dispositivos Bluetooth...";
        statusClass = "alert-info";

        devices.Clear();
        isScanning = true;
        StateHasChanged();

        BtClassic.StartDiscovery();

        // Detener escaneo manualmente tras 10 seg
        await Task.Delay(10000);
        StopScan();
    }

    private void StopScan()
    {
        BtClassic.StopDiscovery();
        isScanning = false;
        statusMessage = $"Escaneo finalizado. Dispositivos encontrados: {devices.Count}.";
        statusClass = devices.Count > 0 ? "alert-success" : "alert-warning";
        StateHasChanged();
    }

    private void ConnectSelectedDevice()
    {
        if (string.IsNullOrWhiteSpace(selectedMac))
        {
            statusMessage = "Selecciona un dispositivo de la lista.";
            statusClass = "alert-warning";
            return;
        }

        statusMessage = "Conectando...";
        statusClass = "alert-info";
        StateHasChanged();

        bool ok = BtClassic.ConnectToDevice(selectedMac);
        if (ok)
        {
            isConnected = true;
            connectedMac = selectedMac;
            statusMessage = $"Conectado correctamente a {selectedMac}.";
            statusClass = "alert-success";
        }
        else
        {
            statusMessage = $"No se pudo conectar a {selectedMac}.";
            statusClass = "alert-danger";
        }
    }

    private void Disconnect()
    {
        BtClassic.Disconnect();
        isConnected = false;
        connectedMac = "";
        statusMessage = "Dispositivo desconectado.";
        statusClass = "alert-info";
    }

    private void ImprimirEtiquetaDespacho()
    {
        // Plantilla DPL con variables vacías
        string Stringdpl =
            "! 0 200 200 1210 1\r\n" +
            "BOX 15 0 795 1200 4\r\n" +
            "TEXT 7 0 25 15 De:\r\n" +
            "FORM\r\n" +
            "PRINT\r\n";

        // Envío al método PrintDPL
        bool result = BtClassic.PrintDPL(Stringdpl);
        if (result)
        {
            statusMessage = "Impresión de plantilla de Etiqueta.";
            statusClass = "alert-success";
        }
        else
        {
            statusMessage = "Error al imprimir la plantilla.";
            statusClass = "alert-danger";
        }
    }

    private void PrintText()
    {
        if (string.IsNullOrWhiteSpace(printText))
        {
            statusMessage = "Ingresa un texto para imprimir.";
            statusClass = "alert-warning";
            return;
        }

        bool result = BtClassic.PrintText(printText);
        if (result)
        {
            statusMessage = $"Texto '{printText}' enviado a impresión.";
            statusClass = "alert-success";
            printText = "";
        }
        else
        {
            statusMessage = "Error al imprimir texto.";
            statusClass = "alert-danger";
        }
    }
}
